from dataclasses import dataclass

from pyoak.node import _REF_ATTR, ASTNode
from pyoak.registry import (
    _REF_TO_NODE,
    _get_node,
    _pop_node,
    _register,
    _register_with_ref,
    clear_registry,
    pop_nodes,
    reset_seed,
    set_seed,
)


@dataclass(frozen=True)
class RegistryTestNode(ASTNode):
    attr: str


def test_register() -> None:
    # Test registering a node
    n = RegistryTestNode("test")
    ref1 = _register(n)
    assert ref1 in _REF_TO_NODE
    assert _REF_TO_NODE[ref1] is n

    # Test registering again creates a new ref
    ref2 = _register(n)
    assert ref2 in _REF_TO_NODE
    assert _REF_TO_NODE[ref2] is n
    assert ref1 != ref2

    # Test registering another node
    node2 = RegistryTestNode("test2")
    ref2 = _register(node2)
    assert ref2 in _REF_TO_NODE
    assert _REF_TO_NODE[ref2] is node2


def test_register_with_ref() -> None:
    # Test registering a node
    n = RegistryTestNode("test")
    ref = "bogus"  # use id that is not generated by _ID_GEN
    assert _register_with_ref(n, ref)
    assert ref in _REF_TO_NODE
    assert _REF_TO_NODE[ref] is n

    # Test registering again with the same ref fails
    o = RegistryTestNode("test2")
    assert not _register_with_ref(o, ref)
    assert ref in _REF_TO_NODE
    assert _REF_TO_NODE[ref] is n


def test_get_node() -> None:
    # Test getting a node
    n = RegistryTestNode("test")
    ref = _register(n)
    assert _get_node(ref) is n

    # Test getting a node that does not exist
    assert _get_node("bogus") is None


def test_pop_node() -> None:
    # Test popping a node
    n = RegistryTestNode("test")
    ref = _register(n)
    # ref is not set on ASTNode on it's own
    object.__setattr__(n, _REF_ATTR, ref)
    assert _get_node(ref) is n
    assert _pop_node(n) is n
    assert ref not in _REF_TO_NODE

    # Test popping a node that does not exist
    assert _pop_node(n) is None


def test_set_reset_seed() -> None:
    # Test setting the seed
    set_seed(123)
    n = RegistryTestNode("test")
    ref = _register(n)
    assert ref == "c4da537c16514dae84867db30d67b366"

    reset_seed()
    _REF_TO_NODE.clear()
    assert _register(n) != "c4da537c16514dae84867db30d67b366"


def test_clear_registry() -> None:
    # Test clearing the registry
    n = RegistryTestNode("test")
    registered = [n.to_attached() for _ in range(10)]  # noqa: F841
    assert len(_REF_TO_NODE) == 10

    clear_registry()
    assert len(_REF_TO_NODE) == 0


def test_pop_nodes() -> None:
    n = RegistryTestNode("test")
    registered = [n.to_attached() for _ in range(10)]
    assert len(_REF_TO_NODE) == 10

    to_drop = registered[:5]
    to_keep = registered[5:]

    pop_nodes(to_drop)
    assert len(_REF_TO_NODE) == 5
    # This test function doesn't remove ref values from the nodes
    assert all(n.ref is not None for n in registered)
    assert all(_REF_TO_NODE.get(n.ref) is None for n in to_drop)  # type: ignore[arg-type]
    assert all(_REF_TO_NODE.get(n.ref) is n for n in to_keep)  # type: ignore[arg-type]
